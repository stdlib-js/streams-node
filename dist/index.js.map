{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace streams\n*/\nvar streams = {};\n\n/**\n* @name debugStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/debug}\n*/\nsetReadOnly( streams, 'debugStream', require( '@stdlib/streams-node-debug' ) );\n\n/**\n* @name debugSinkStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/debug-sink}\n*/\nsetReadOnly( streams, 'debugSinkStream', require( '@stdlib/streams-node-debug-sink' ) );\n\n/**\n* @name emptyStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/empty}\n*/\nsetReadOnly( streams, 'emptyStream', require( '@stdlib/streams-node-empty' ) );\n\n/**\n* @name arrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-array}\n*/\nsetReadOnly( streams, 'arrayStream', require( '@stdlib/streams-node-from-array' ) );\n\n/**\n* @name circularArrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-circular-array}\n*/\nsetReadOnly( streams, 'circularArrayStream', require( '@stdlib/streams-node-from-circular-array' ) );\n\n/**\n* @name constantStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-constant}\n*/\nsetReadOnly( streams, 'constantStream', require( '@stdlib/streams-node-from-constant' ) );\n\n/**\n* @name iteratorStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-iterator}\n*/\nsetReadOnly( streams, 'iteratorStream', require( '@stdlib/streams-node-from-iterator' ) );\n\n/**\n* @name stridedArrayStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/from-strided-array}\n*/\nsetReadOnly( streams, 'stridedArrayStream', require( '@stdlib/streams-node-from-strided-array' ) );\n\n/**\n* @name inspectStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/inspect}\n*/\nsetReadOnly( streams, 'inspectStream', require( '@stdlib/streams-node-inspect' ) );\n\n/**\n* @name inspectSinkStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/inspect-sink}\n*/\nsetReadOnly( streams, 'inspectSinkStream', require( '@stdlib/streams-node-inspect-sink' ) );\n\n/**\n* @name joinStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/join}\n*/\nsetReadOnly( streams, 'joinStream', require( '@stdlib/streams-node-join' ) );\n\n/**\n* @name splitStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/split}\n*/\nsetReadOnly( streams, 'splitStream', require( '@stdlib/streams-node-split' ) );\n\n/**\n* @name stderr\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stderr}\n*/\nsetReadOnly( streams, 'stderr', require( '@stdlib/streams-node-stderr' ) );\n\n/**\n* @name stdin\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stdin}\n*/\nsetReadOnly( streams, 'stdin', require( '@stdlib/streams-node-stdin' ) );\n\n/**\n* @name stdout\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/stdout}\n*/\nsetReadOnly( streams, 'stdout', require( '@stdlib/streams-node-stdout' ) );\n\n/**\n* @name transformStream\n* @memberof streams\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/streams/node/transform}\n*/\nsetReadOnly( streams, 'transformStream', require( '@stdlib/streams-node-transform' ) );\n\n\n// EXPORTS //\n\nmodule.exports = streams;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAU,CAAC,EASfD,EAAaC,EAAS,cAAe,QAAS,4BAA6B,CAAE,EAS7ED,EAAaC,EAAS,kBAAmB,QAAS,iCAAkC,CAAE,EAStFD,EAAaC,EAAS,cAAe,QAAS,4BAA6B,CAAE,EAS7ED,EAAaC,EAAS,cAAe,QAAS,iCAAkC,CAAE,EASlFD,EAAaC,EAAS,sBAAuB,QAAS,0CAA2C,CAAE,EASnGD,EAAaC,EAAS,iBAAkB,QAAS,oCAAqC,CAAE,EASxFD,EAAaC,EAAS,iBAAkB,QAAS,oCAAqC,CAAE,EASxFD,EAAaC,EAAS,qBAAsB,QAAS,yCAA0C,CAAE,EASjGD,EAAaC,EAAS,gBAAiB,QAAS,8BAA+B,CAAE,EASjFD,EAAaC,EAAS,oBAAqB,QAAS,mCAAoC,CAAE,EAS1FD,EAAaC,EAAS,aAAc,QAAS,2BAA4B,CAAE,EAS3ED,EAAaC,EAAS,cAAe,QAAS,4BAA6B,CAAE,EAS7ED,EAAaC,EAAS,SAAU,QAAS,6BAA8B,CAAE,EASzED,EAAaC,EAAS,QAAS,QAAS,4BAA6B,CAAE,EASvED,EAAaC,EAAS,SAAU,QAAS,6BAA8B,CAAE,EASzED,EAAaC,EAAS,kBAAmB,QAAS,gCAAiC,CAAE,EAKrF,OAAO,QAAUA",
  "names": ["setReadOnly", "streams"]
}
